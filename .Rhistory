devtools::load_all()
list_res <- list_driver(gene_list, study_background = study_background)
gene_list
list_res$data$study_background
list_res$data$test_background
test_background <- list_res$data$test_background
test_background
rbinom(length(test_background), 1, 0.1)
beta <- rbinom(length(test_background), 1, 0.1)
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
beta <- rbinom(length(test_background), 1, 0.1)
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
prep_score_data(betahat)
prep_score_data(betahat, study_id_type = 'ENTREZID')
genes
tibble::tibble(a = rep(1, 10))
a = 'xyz'
tibble::tibble(!!rlang::sym(a) = rep(1, 10))
tibble::tibble(!!rlang::sym(a) = rep(1, 10))
tibble::tibble(rep(1, 10))
tb <- tibble::tibble(rep(1, 10))
tb
colnames(tb)
colnames(tb) <- 'a'
tb
devtools::load_all()
prep_score_data(betahat, study_id_type = 'ENTREZID')
data <- prep_score_data(betahat, study_id_type = 'ENTREZID')
data$betahat
betahat
logisticsusie::pointnormalsusie(data$X, data$betahat, data$betahat_se)
data$X
dim(data$X)
beta
names(beta) <- test_background
logisticsusie::binsusie(sim$X, beta)
logisticsusie::binsusie(data$X, beta)
devtools::install_github('ktayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie', force=T)
logisticsusie::binsusie(data$X, beta)
logisticsusie::binsusie(data$X, beta)
dim(data$X)
dim(beta)
length(beta)
beta
logisticsusie::binsusie(X=data$X, y=beta)
binsusie_data <- list(
X = data$X,
y = beta,
Z = matrix(rep(1, 1000), nrow = 1000)
)
fit <- logisticsusie:::init.binsusie(binsusie_data)
fit <- logisticsusie:::init.binsusie(binsusie_data)
binsusie_data <- list(
X = as.matrix(data$X),
y = beta,
Z = matrix(rep(1, 1000), nrow = 1000)
)
logisticsusie::binsusie(as.matrix(data$X), beta)
fit <- logisticsusie::binsusie(as.matrix(data$X), beta)
fit$elbo
data$X
class(data$X)
test_susie_sparse <- function(N = 1) {
data <- logisticsusie:::sim_susie_sparse(N = N)
fit <- logisticsusie:::fit.binsusie(data, maxiter = 100, tol = 1e-5)
return(list(
fit = fit,
monotone = .monotone(fit$elbo)
))
}
test_susie_sparse()
DB <- gseasusie::load_gene_sets('pathways')
entrezid <- rownames(DB$pathways$X)
g2g <- generate_geneidmap(entrezid, 'ENTREZID', to='SYMBOL')
study_background <- c(g2g$SYMBOL[1:1e3], fake_symbols)
gene_list <- c(study_background[1:100], 'FAKEFAKE')
background <- entrezid[50:10050]
list_res <- list_driver(gene_list, study_background = study_background)
devtools::load_all()
DB <- gseasusie::load_gene_sets('pathways')
entrezid <- rownames(DB$pathways$X)
g2g <- generate_geneidmap(entrezid, 'ENTREZID', to='SYMBOL')
fake_symbols <- paste0('FAKE', seq(50))
study_background <- c(g2g$SYMBOL[1:1e3], fake_symbols)
gene_list <- c(study_background[1:100], 'FAKEFAKE')
background <- entrezid[50:10050]
list_res <- list_driver(gene_list, study_background = study_background)
test_background <- list_res$data$test_background
beta <- rbinom(length(test_background), 1, 0.1)
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
# scores
betahat <- rnorm(length(study_background))
betahat[1:100] <- betahat[1:100] + 1
names(betahat) <- study_background
fit <- logisticsusie::binsusie(data$X, beta)
list_res$data$X
fit <- logisticsusie::binsusie(list_res$data$X, beta)
tic()
library(tictoc)
tic()
fit <- logisticsusie::binsusie(list_res$data$X, beta)
toc()
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se)
length(se)
length(betahat)
test_background <- list_res$data$test_background
beta <- rbinom(length(test_background), 1, 0.1)
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
study_background <- list_res$data$study_background
beta <- rbinom(length(study_background), 1, 0.1)
names(beta) <- study_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- study_background
se <- rep(1, length(betahat))
names(se) <- study_background
length(beta)
test_background <- list_res$data$test_background
beta <- rbinom(length(test_background), 1, 0.1)
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
fit <- logisticsusie::binsusie(list_res$data$X, beta)
toc()
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se)
devtools::install_github('karltayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie')
devtools::load_all()
devtools::load_all()
DB <- gseasusie::load_gene_sets('pathways')
entrezid <- rownames(DB$pathways$X)
g2g <- generate_geneidmap(entrezid, 'ENTREZID', to='SYMBOL')
fake_symbols <- paste0('FAKE', seq(50))
study_background <- c(g2g$SYMBOL[1:1e3], fake_symbols)
gene_list <- c(study_background[1:100], 'FAKEFAKE')
background <- entrezid[50:10050]
list_res <- list_driver(gene_list, study_background = study_background)
test_background <- list_res$data$test_background
beta <- rbinom(length(test_background), 1, 0.1)
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
library(tictoc)
tic()
fit <- logisticsusie::binsusie(list_res$data$X, beta)
toc()
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se)
toc()
susieR::susie_plot(z.fit)
susieR::susie_plot(z.fit, "PIP")
beta <- list_res$data$X[, 1]
beta <- list_res$data$X[, 10]
beta
length(beta)
length(test_background)
test_background <- list_res$data$test_background
beta <- list_res$data$X[, 10]
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
test_background <- list_res$data$test_background
beta <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
test_background <- list_res$data$test_background
beta <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
names(beta) <- test_background
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
fit <- logisticsusie::binsusie(list_res$data$X, beta)
toc()
susieR::susie_plot(fit, "PIP")
fit$sets
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se)
toc()
susieR::susie_plot(z.fit, "PIP")
z.fit$sets
z.fit$f1
z.fit$elbo
plot(z.fit$elbo)
se
betahat
tic()
thresh.fit <- logisticsusie::binsusie(list_res$data$X, abs(betahat) > 2)
toc()
susieR::susie_plot(fit, "PIP")
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 2)
toc()
susieR::susie_plot(z.fit, "PIP")
z.fit$data$y
hist(z.fit$data$y)
plot(z.fit$data$y, z.fit$data$betahat)
hist(z.fit$data$betahat[beta == 1])
test_background <- list_res$data$test_background
beta <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
names(beta) <- test_background
betahat <- 5 * beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
test_background <- list_res$data$test_background
beta <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
names(beta) <- test_background
betahat <- 5 * beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 2)
toc()
susieR::susie_plot(z.fit, "PIP")
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 50)
toc()
susieR::susie_plot(z.fit, "PIP")
beta
tic()
fit <- gseasusie::fit_logistic_susie(list_res$data$X, beta)
toc()
susieR::susie_plot(fit, "PIP")
tic()
fit <- gseasusie::fit_logistic_susie(list_res$data$X, beta)
toc()
susieR::susie_plot(fit, "PIP")
y
Z
delta = glm(as.numeric(y) ~ Z - 1, family = "binomial")$coef
y
min(y)
max(y)
pmin(beta, 1)
max(pmin(beta, 1))
beta <- pmin(beta, 1)
tic()
fit <- logisticsusie::binsusie(list_res$data$X, beta)
toc()
susieR::susie_plot(fit, "PIP")
fit2 <- gseasusie::fit_logistic_susie(list_res$data$X, beta)
susieR::susie_plot(fit2, "PIP")
fit2$sets
fit$sets
# point normal susie not finding the answer :(
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 50)
toc()
susieR::susie_plot(z.fit, "PIP")
devtools::install_github('karltayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie')
devtools::install_github('karltayeb/logisticsusie')
library(tictoc)
devtools::load_all()
DB <- gseasusie::load_gene_sets('pathways')
entrezid <- rownames(DB$pathways$X)
g2g <- generate_geneidmap(entrezid, 'ENTREZID', to='SYMBOL')
fake_symbols <- paste0('FAKE', seq(50))
study_background <- c(g2g$SYMBOL[1:1e3], fake_symbols)
gene_list <- c(study_background[1:100], 'FAKEFAKE')
background <- entrezid[50:10050]
list_res <- list_driver(gene_list, study_background = study_background)
beta <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
# test score version
test_background <- list_res$data$test_background
beta <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
beta <- pmin(beta, 1)
names(beta) <- test_background
betahat <- 5 * beta + rnorm(length(beta))
# test score version
test_background <- list_res$data$test_background
y <- list_res$data$X[, 10] + rbinom(length(test_background), 1, 0.05)
y <- pmin(beta, 1)
beta <- y * rnorm(length(y)) * 3
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
name(y) <- test_background
beta <- y * rnorm(length(y)) * 3
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
fit <- logisticsusie::binsusie(list_res$data$X, y)
toc()
susieR::susie_plot(fit, "PIP")
fit$sets
fit2 <- gseasusie::fit_logistic_susie(list_res$data$X, beta)
susieR::susie_plot(fit2, "PIP")
fit2 <- gseasusie::fit_logistic_susie(list_res$data$X, y)
susieR::susie_plot(fit2, "PIP")
fit2$sets
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 50)
toc()
susieR::susie_plot(z.fit, "PIP")
z.fit$f1
z.fit$elbo
hist(z.fit$data$y)
logisticsusie:::coef.binsusie(z.fit)
logisticsusie:::compute_Xb.binsusie(z.fit)
a <- logisticsusie:::compute_Xb.binsusie(z.fit)
a
plot(a, y)
plot(a, factor(y))
plot(factor(y), a)
plot(factor(y), z.fit$data$y)
list_res$data$X[, 10]
sum(list_res$data$X[, 10])
colSums(list_res$data$X)
Matrix::colSums(list_res$data$X)
Matrix::colSums(list_res$data$X) %>% hist()
which.max(Matrix::colSums(list_res$data$X))
dim(list_res$data$X.sets)
dim(list_res$data$X)
a <- Matrix::colSums(list_res$data$X)
which(a > 50)
which(a > 100)
which((a > 100) & (a < 150))
# test score version
test_background <- list_res$data$test_background
y <- list_res$data$X[, 109] + rbinom(length(test_background), 1, 0.05)
y <- pmin(beta, 1)
name(y) <- test_background
beta <- y * rnorm(length(y)) * 3
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
fit <- logisticsusie::binsusie(list_res$data$X, y)
toc()
susieR::susie_plot(fit, "PIP")
fit2 <- gseasusie::fit_logistic_susie_veb_boost(list_res$data$X, y)
susieR::susie_plot(fit2, "PIP")
y
min(y)
max(y)
# test score version
test_background <- list_res$data$test_background
y <- list_res$data$X[, 109] + rbinom(length(test_background), 1, 0.05)
y <- pmin(beta, 1)
name(y) <- test_background
# test score version
test_background <- list_res$data$test_background
y <- list_res$data$X[, 109] + rbinom(length(test_background), 1, 0.05)
y <- pmin(beta, 1)
name(y) <- test_background
names(y) <- test_background
y
list_res$data$X[, 109]
y <- list_res$data$X[, 109] + rbinom(length(test_background), 1, 0.05)
y <- pmin(y, 1)
names(y) <- test_background
y
beta <- y * rnorm(length(y)) * 3
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
fit <- logisticsusie::binsusie(list_res$data$X, y)
toc()
susieR::susie_plot(fit, "PIP")
fit$sets
veb <- gseasusie::fit_logistic_susie_veb_boost(list_res$data$X, y)
susieR::susie_plot(veb, "PIP")
vb <- gseasusie::fit_logistic_susie(list_res$data$X, y)
susieR::susie_plot(vb, "PIP")
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 50)
toc()
susieR::susie_plot(z.fit, "PIP")
susieR::susie_plot(z.fit, "PIP")
tic()
thresh.fit <- logisticsusie::binsusie(list_res$data$X, abs(betahat) > 2)
toc()
susieR::susie_plot(fit, "PIP")
susieR::susie_plot(thresh.fit, "PIP")
susieR::susie_plot(fit, "PIP", main='binsusie')
a
idx <- which((a > 50) & (a < 100))[1]
idx
# test score version
gene_set_size <- Matrix::colSums(list_res$data$X)
idx <- which((gene_set_size > 50) & (gene_set_size < 100))[1]
gene_set_size[idx]
logits <- -2 + 3 * list_res$data$X[, idx]
logits <- -2 + 3 * list_res$data$X[, idx]
y <- rbinom(length(logits), 1, p=1/(1 + exp(-logits)))
y
mean(y)
logits <- -2 + 3 * list_res$data$X[, idx]
y <- rbinom(length(logits), 1, p=1/(1 + exp(-logits)))
names(y) <- test_background
beta <- y * rnorm(length(y)) * 2
betahat <- beta + rnorm(length(beta))
names(betahat) <- test_background
se <- rep(1, length(betahat))
names(se) <- test_background
tic()
fit <- logisticsusie::binsusie(list_res$data$X, y)
toc()
susieR::susie_plot(fit, "PIP", main='binsusie')
veb <- gseasusie::fit_logistic_susie_veb_boost(list_res$data$X, y)
susieR::susie_plot(veb, "PIP", main='VEB')
vb <- gseasusie::fit_logistic_susie(list_res$data$X, y)
susieR::susie_plot(vb, "PIP", main='VB')
# point normal susie
tic()
z.fit <- logisticsusie::pointnormalsusie(list_res$data$X, betahat = betahat, se = se, max_iter = 50)
toc()
susieR::susie_plot(z.fit, "PIP", main='Point-normal')
# thresholding
tic()
thresh.fit <- logisticsusie::binsusie(list_res$data$X, abs(betahat) > 2)
toc()
susieR::susie_plot(thresh.fit, "PIP", main='z > 2')
# linear susie
tic()
thresh.fit <- susieR::susie(list_res$data$X, betahat)
toc()
susieR::susie_plot(thresh.fit, "PIP", main='linear')
# linear susie
tic()
linear.fit <- susieR::susie(list_res$data$X, betahat)
toc()
susieR::susie_plot(linear.fit, "PIP", main='linear')
gseasusie::load_all_msigdb
gseasusie:::load_gene_sets('c1')
gseasusie:::load_gene_sets
gseasusie:::load_msigdb_geneset_x
gseasusie:::load_msigdb_geneset_x
X
X10
exp(0.5)
exp(0.6)
exp(0.7)
exp(0.68)
exp(0.69)
exp(0.699)
exp(0.698)
log(2)
fit_bin_ser
fit_veb_ser
gseasusie::load_gene_sets
?gseasusie::load_gene_sets
load_gene_sets
devtools::load_all()
load_gene_sets
load_msigdb_geneset_x(db='H')
?msigdbr::msigdbr
msigdbr::msigdbr_collections()
msigdbr::msigdbr_collections()$gs_cat
gseasusie:::load_msigdb_geneset_x('H', min.size=1)
install.packages('~/R/logisticsusie2')
devtools::document()
devtools::build()
#' @export
coerce_list <- function(list, background, gs_background, from='ENSEMBL', to='ENTREZID'){
# map unique IDs
idmap <- gseasusie:::generate_geneidmap(background, from, to, filter = T)
colnames(idmap) <- c('from', 'to')
# subset gene list background to genes that can be mapped
background2 <- intersect(background, idmap$from)
# map gene ids
background3 <- idmap[idmap$from %in% background2,]$to
# intersect with gene set background
background4 <- intersect(gs_background, background3)
# get gene list, restricted to shared background genes
idmap <- idmap[idmap$to %in% background4,]
list4 <- idmap[idmap$from %in% list,]$to
res <- list(list = list4, background = background4)
return(res)
}
devtools::document()
devtools::build()
WebGestaltR::listGeneSet()
head(WebGestaltR::listGeneSet())
names(WebGestaltR::listGeneSet())
WebGestaltR::listGeneSet()$name
devtools::document()
